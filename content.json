{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"������i","url":"http://yoursite.com","root":"/"},"pages":[{"title":"tags","date":"2019-11-13T02:09:44.000Z","updated":"2019-11-13T02:10:58.269Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":"12layout: tagscomments: false document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"categories","date":"2019-11-13T02:11:48.000Z","updated":"2019-11-13T02:12:31.557Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"categories12layout: categoriescomments: false document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"about","date":"2019-11-13T02:13:15.000Z","updated":"2019-11-13T02:13:41.465Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"123layout: aboutcomments: truereward: false document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"jsp实现用户登录","slug":"jsp实现用户登录","date":"2019-11-11T10:59:20.000Z","updated":"2019-11-13T02:35:31.266Z","comments":true,"path":"2019/11/11/jsp实现用户登录/","link":"","permalink":"http://yoursite.com/2019/11/11/jsp实现用户登录/","excerpt":"","text":"*** Eclipse中创建Dynamic Web Project 在java Resource中创建一个包，用来放类和接口 此处创建一个com.jdbc.login包 创建一个JdbcUtil.java驱动连接数据库： 代码如下： 要注意的是连接本地数据库，本地端口，用户名，密码一定不要弄错！！！ 12345678910111213141516171819202122232425262728293031323334353637package com.jdbc.login;import java.sql.Connection;import java.sql.DriverManager;public class JdbcUtil { private static String driver =\"com.mysql.jdbc.Driver\";//数据库驱动类 private static String url =\"jdbc:mysql://localhost:3306/stuinfo\";// 数据库链接 private static String user =\"root\";// 数据库用户名 private static String password =\"root\";// 数据库密码 // 权限修饰符 静态修饰符 返回值类型 方法名称 /** * 获取链接的 * @return conn */ public static Connection getConnection() { try { //1. 类加载 Class.forName(driver); //2. 驱动管理获取链接\\三个参数\\ 接收 Connection conn = DriverManager.getConnection(url, user, password); return conn; } catch (Exception e) { throw new RuntimeException(e); } } // TODO 关闭链接没写} 在User类中封装四个变量，分别是id，username（用户名），password（密码），sex（性别）,代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.jdbc.login;public class User { private Integer id; private String username; private String password; private String sex; public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getSex() { return sex; } public void setSex(String sex) { this.sex = sex; } @Override public String toString() { return \"User [id=\" + id + \", username=\" + username + \", password=\" + password + \", sex=\" + sex + \"]\"; }} 创建接口UserDao,传递参数,代码如下： 1234567891011121314package com.jdbc.login;public interface UserDao { /** * 用户登录功能 * @param username 参数 为用户名 * @param password 参数 为密码 * @return user */ User login(String username , String password);} 创建UserDaolmpl类，将本地输入的账号和密码传过来，代码如下： 在你所连接的数据库中创建一个表，命名为user，表结构为id：主键，非空，intrger型；username：非空，varchar(50);password:非空，varchar(50);sex:非空，varchar(10) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package com.jdbc.login;import java.sql.Connection;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;public class UserDaoImpl implements UserDao { /** * 通过传值把本地输入的账号和密码穿过来 * username--&gt;用户输入的账号 * password--&gt;用户输入的密码 * */ @Override public User login(String username, String password) { // TODO Auto-generated method stub try { Connection con = JdbcUtil.getConnection(); Statement st = con.createStatement(); ResultSet rs = st .executeQuery(\"select * from user where username = '\" + username + \"' and password = '\" + password + \"';\"); if (rs.next()) { User user = new User(); user.setUsername(rs.getString(\"username\")); user.setPassword(rs.getString(\"password\")); System.out.println(\"userDao中的user的内容是\" + user); return user; } else { return null; } } catch (SQLException e) { // throw new UserLoginException(); } return null; }} 创建UserLoginServlet类，获取jsp界面输入的值传给servlet,代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package com.jdbc.login;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import com.sun.org.apache.regexp.internal.recompile;/** * servlet相应的java代码 */public class UserLoginServlet extends HttpServlet { public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { /* * 1 改变编码格式 */ response.setContentType(\"text/html\"); response.setCharacterEncoding(\"utf-8\"); request.setCharacterEncoding(\"utf-8\"); /* * 2. 获取jsp界面输入的账号和密码---&gt;本地输入的账号和密码 */ String username = request.getParameter(\"username\"); String password = request.getParameter(\"password\"); /* * 3. 将获取到的用户名和密码传递给 userService! * 所以得有 userService没有怎么办? 实例化 就有了 */ UserService userService = new UserServiceImpl(); User u = userService.userLogin(username, password); if(u == null){ response.getWriter().write(\"您的用户名或密码有误，请检查！\"); }else{ response.getWriter().write(\"用户登录成功！\"); } } public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { doGet( request, response); } } 创建接口UserService，传递参数,代码如下： 123456789101112131415package com.jdbc.login;public interface UserService { /** * 用户登录功能 * @param username 参数 为用户名 * @param password 参数 为密码 * @return user */ User userLogin(String username , String password); } 创建UserServiceImpl类继承UserService，代码如下： 1234567891011121314package com.jdbc.login;public class UserServiceImpl implements UserService { // 采用多态的形式进行实例化dao UserDao dao = new UserDaoImpl(); @Override public User userLogin(String username, String password) { //dao代表的是UserDao 这个接口 //.login 用这个接口中的用户登录功能 并且传了两个参数给你 return dao.login(username, password); }} 在/UsersLoginDemo/WebContent下创建index.jsp文件,代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"%&gt;&lt;% String path = request.getContextPath(); String basePath = request.getScheme() + \"://\" + request.getServerName() + \":\" + request.getServerPort() + path + \"/\";%&gt;&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"&gt;&lt;html&gt;&lt;head&gt;&lt;base href=\"&lt;%=basePath%&gt;\"&gt;&lt;title&gt;My JSP 'index.jsp' starting page&lt;/title&gt;&lt;meta http-equiv=\"pragma\" content=\"no-cache\"&gt;&lt;meta http-equiv=\"cache-control\" content=\"no-cache\"&gt;&lt;meta http-equiv=\"expires\" content=\"0\"&gt;&lt;meta http-equiv=\"keywords\" content=\"keyword1,keyword2,keyword3\"&gt;&lt;meta http-equiv=\"description\" content=\"This is my page\"&gt;&lt;!-- &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt; --&gt;&lt;/head&gt;&lt;body&gt; &lt;center&gt; &lt;form action=\"&lt;%=basePath%&gt;servlet/UserLoginServlet\" method=\"post\"&gt; &lt;table border=\"1px\" width=\"438px\"&gt; &lt;tr align=\"center\"&gt; &lt;td&gt;用户名&lt;/td&gt; &lt;td&gt;&lt;input type=\"text\" name=\"username\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr align=\"center\"&gt; &lt;td&gt;密码&lt;/td&gt; &lt;td&gt;&lt;input type=\"password\" name=\"password\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr align=\"center\"&gt; &lt;td colspan=\"2\"&gt;&lt;input type=\"submit\" value=\"用户登录\"&gt; &lt;input type=\"reset\" value=\"重置内容\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/center&gt;&lt;/body&gt;&lt;/html&gt; 最后一点就是在/UsersLoginDemo/WebContent/WEB-INF/lib下创建web.xml（我也不太明白，但是老师就是这样讲的哈哈哈）代码如下： 1234567891011121314151617181920212223&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\" id=\"WebApp_ID\" version=\"3.1\"&gt; &lt;display-name&gt;UserLoginDemo&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;default.html&lt;/welcome-file&gt; &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;servlet&gt; &lt;servlet-name&gt;UserLoginServlet&lt;/servlet-name&gt; &lt;servlet-class&gt;com.jdbc.login.UserLoginServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;UserLoginServlet&lt;/servlet-name&gt; &lt;url-pattern&gt;/servlet/UserLoginServlet&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"jsp内置对象","slug":"jsp内置对象","date":"2019-11-08T05:37:29.000Z","updated":"2019-11-13T02:35:31.266Z","comments":true,"path":"2019/11/08/jsp内置对象/","link":"","permalink":"http://yoursite.com/2019/11/08/jsp内置对象/","excerpt":"","text":"jsp提供了由容器实现和管理的内置对象，也可以称之为隐含对象，由于JSP使用Java作为脚本语言，所以JSP将具有强大的对象处理能力，并且可以动态创建Web页面内容。在JSP中一共预先定义了9个这样的对象，分别为request、response、session、application、out、pageContext、config、page和exception。 内置对象 类型 request javax.servlet.http.HttpServletRequest response javax.servet.ttp.HttpServletResponse session javax.servlet.http.HttpSession application javax.servlet. SerletContext out javax.servlet.jsp. JspWriter pageContext javax.servlet.jsp. PageContext config javax. servlet ServletConfig page javax. servletjsp.JspPage exception javax.serletjsp.JspException request对象客户端生成的一次网络请求的细节，一段文字信息（包括HTTP头信息、系统信息、请求方式和请求参数等）。 用户登录信息示例： 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;%@ page language=\"java\" import=\"java.util.*\" pageEncoding=\"UTF-8\"%&gt;&lt;%String path = request.getContextPath();String basePath = request.getScheme()+\"://\"+request.getServerName()+\":\"+request.getServerPort()+path+\"/\";%&gt;&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"&gt;&lt;html&gt; &lt;head&gt; &lt;base href=\"&lt;%=basePath%&gt;\"&gt; &lt;title&gt;My JSP 'index.jsp' starting page&lt;/title&gt; &lt;meta http-equiv=\"pragma\" content=\"no-cache\"&gt; &lt;meta http-equiv=\"cache-control\" content=\"no-cache\"&gt; &lt;meta http-equiv=\"expires\" content=\"0\"&gt; &lt;meta http-equiv=\"keywords\" content=\"keyword1,keyword2,keyword3\"&gt; &lt;meta http-equiv=\"description\" content=\"This is my page\"&gt; &lt;!-- &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt; --&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;用户登录&lt;/h1&gt; &lt;hr&gt; &lt;form name=\"loginForm\" action=\"&lt;%=basePath%&gt;/servlet/Login\" method=\"post\"&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;用户名：&lt;/td&gt; &lt;td&gt;&lt;input type=\"text\" name=\"username\" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;密码：&lt;/td&gt; &lt;td&gt;&lt;input type=\"password\" name=\"password\" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=\"2\" align=\"center\"&gt;&lt;input type=\"submit\" value=\"登录\"/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 用到了cookie： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;%@ page language=\"java\" import=\"java.util.*,java.net.*\" contentType=\"text/html; charset=utf-8\"%&gt;&lt;%String path = request.getContextPath();String basePath = request.getScheme()+\"://\"+request.getServerName()+\":\"+request.getServerPort()+path+\"/\";%&gt; &lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"&gt;&lt;html&gt; &lt;head&gt; &lt;base href=\"&lt;%=basePath%&gt;\" rel=\"external nofollow\" rel=\"external nofollow\" rel=\"external nofollow\" &gt; &lt;title&gt;My JSP 'dologin.jsp' starting page&lt;/title&gt; &lt;meta http-equiv=\"pragma\" content=\"no-cache\"&gt; &lt;meta http-equiv=\"cache-control\" content=\"no-cache\"&gt; &lt;meta http-equiv=\"expires\" content=\"0\"&gt; &lt;meta http-equiv=\"keywords\" content=\"keyword1,keyword2,keyword3\"&gt; &lt;meta http-equiv=\"description\" content=\"This is my page\"&gt; &lt;!-- &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\" rel=\"external nofollow\" rel=\"external nofollow\" rel=\"external nofollow\" &gt; --&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;登录成功&lt;/h1&gt; &lt;hr&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;% request.setCharacterEncoding(\"utf-8\"); //首先判断用户是否选择了记住登录状态 String[] isUseCookies = request.getParameterValues(\"isUseCookie\"); if(isUseCookies!=null&amp;&amp;isUseCookies.length&gt;0) { //把用户名和密码保存在Cookie对象里面 String username = URLEncoder.encode(request.getParameter(\"username\"),\"utf-8\"); //使用URLEncoder解决无法在Cookie当中保存中文字符串问题 String password = URLEncoder.encode(request.getParameter(\"password\"),\"utf-8\"); Cookie usernameCookie = new Cookie(\"username\",username); Cookie passwordCookie = new Cookie(\"password\",password); usernameCookie.setMaxAge(864000); passwordCookie.setMaxAge(864000);//设置最大生存期限为10天 response.addCookie(usernameCookie); response.addCookie(passwordCookie); } else { Cookie[] cookies = request.getCookies(); if(cookies!=null&amp;&amp;cookies.length&gt;0) { for(Cookie c:cookies) { if(c.getName().equals(\"username\")||c.getName().equals(\"password\")) { c.setMaxAge(0); //设置Cookie失效 response.addCookie(c); //重新保存。 } } } } %&gt; &lt;a href=\"Users.jsp\" rel=\"external nofollow\" target=\"_blank\"&gt;查看用户信息&lt;/a&gt; &lt;/body&gt; &lt;/html&gt; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"Vue学习","slug":"Vue学习","date":"2019-11-01T08:22:28.000Z","updated":"2019-11-13T02:35:31.266Z","comments":true,"path":"2019/11/01/Vue学习/","link":"","permalink":"http://yoursite.com/2019/11/01/Vue学习/","excerpt":"","text":"代码示例在线引用Vue 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748### &lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.staticfile.org/vue/2.2.2/vue.min.js\"&gt;&lt;/script&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"css/new_file.css\"/&gt; &lt;body&gt; &lt;div id=\"demo\"&gt; {{name}} &lt;input type=\"text\" v-model=\"name\" /&gt; &lt;!--双向数据绑定--&gt; &lt;img :src=\"img\" width=\"200px\" /&gt; &lt;img :src=\"img\" width=\"200px\" /&gt; &lt;img :src=\"img\" width=\"200px\" /&gt; &lt;img :src=\"img\" width=\"200px\" /&gt; {{message}} &lt;span v-html=\"message\"&gt;&lt;/span&gt; &lt;span v-if=\"ifs\"&gt;{{name}}&lt;/span&gt; &lt;!--//插入标签--&gt; &lt;span v-else=\"\"&gt;{{message}}&lt;/span&gt; &lt;span v-show=\"show\"&gt;{{name}}&lt;/span&gt;&lt;!-- //隐藏--&gt; &lt;h1 v-for=\"(i,c) in todus\"&gt;{{i}}{{c}}&lt;/h1&gt; &lt;button v-on:click=\"show=true\"&gt;点击&lt;/button&gt; &lt;button v-on:click=\"show=false\"&gt;点击&lt;/button&gt; &lt;!--&lt;button @click=\"show=true\"&gt;点击&lt;/button&gt; &lt;button @click=\"show=false\"&gt;点击&lt;/button&gt;--&gt; &lt;div :class=\"cs\"&gt;&lt;/div&gt; &lt;!--&lt;div :id=\"ids\"&gt;&lt;/div&gt;--&gt; &lt;!--&lt;div class=['cs','ccs']&gt;5678&lt;/div&gt;--&gt; &lt;!--&lt;div :class={'cs',show}&gt;fhdu&lt;/div&gt; &lt;div :class=[cs,ccs]&gt;999感冒灵颗粒&lt;/div&gt; &lt;div :class=(show?'cs':'ccs')&gt;红霉素软胶囊&lt;/div&gt; --&gt; &lt;span :style=obj&gt;sxjdhucbe&lt;/span&gt; &lt;span :style=[obj,objs]&gt;回顾 r&lt;/span&gt;&lt;br /&gt; 单价：&lt;input type=\"number\" v-model=\"price\" /&gt;&lt;br /&gt; 数量：&lt;input type=\"number\" v-model=\"num\" /&gt;&lt;br /&gt; 总价：{{price*num}}&lt;br /&gt; 属性监听总价：{{sum}}&lt;br /&gt; 计算属性总价：{{total}}&lt;br /&gt; 普通方法总计：{{totals()}}&lt;br /&gt; &lt;video :src=\"name\" controls=\"controls\"&gt;&lt;/video&gt; &lt;/div&gt;​ ​12&lt;/html&gt; js文件中123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657var jsons={ code: 200, message: \"成功!\", result: [{ sid: \"29875521\", text: \"一句这呢全场最大最响的包袱\", video: \"http://uvideo.spriteapp.cn/video/2019/1023/5daf6ea50d6a2_wpd.mp4\", }]}var vue=new Vue({ el:\"#demo\",//对应的ID地址和class地址 data:{ name:jsons.result[0].video, img:\"img/tx.jpg\", message:'&lt;h1&gt;vue nb&lt;/h1&gt;', ifs:true, show:false, todus:[\"孙悟空\",\"猪八戒\",\"沙悟净\",\"唐三藏\"], ids:\"ids\", cs:\"cs\", obj:{ color:\"red\", }, objs:{ fontSize:\"20px\", }, price:\"\", num:\"\", sum:\"\" }, watch:{ price:function(newValue){ console.log(\"price\") this.sum=newValue*this.num; }, num:function(newValue){ console.log(\"num\") this.sum=newValue*this.price; } }, computed:{ total:function(){ console.log(\"计算属性\") let sum=this.num*this.price; return sum; } }, methods:{ totals:function(){ console.log(\"普通方法\") let sum=this.num*this.price; return sum; } }}) 计算属性•v-on 事件属性 •V-bind:class 类属性 •动态class添加与改变 •属性中使用双目运算符 Vue中大多内容都可以进行属性计算的–可进行数学计算，逻辑运算等 •使用方法 •例1：68，false 返回true或false •例2：v-if=“20&gt;30”,v-show=“30&lt;20“ ，返回计算结果 V-on事件•作用：给节点添加事件 •使用方法： V-on:事件名称=(执行内容) 例如利用点击事件将v-if条件更改 1&lt;button v-on:click=\"ifshow=true\"&gt;button&lt;/button&gt; 我是动态创建 1&lt;p v-if=\"ifShow\"&gt;我是动态创建&lt;p/&gt; 简便写法： @:事件名称=（执行内容） V-bind:class•作用：为类添加属性 •使用方法： –分为类添加和id添加 •V-bind:class –例：V-bind:class(插值内容) •V-bind:id –例：v-bind:Id(插值内容) –简便写法： •:class() •:id() 动态class添加与改变•对象写法 –如果isshow为true则添加active样式 1–&lt;p class=\"ccc\" :class={active:isshow}&gt;{{name}}&lt;/p&gt; – •数组写法 –所有的类名都被添加 – 1&lt;p class=\"ccc\" :class=['aaa','bbb']&gt;{{name}}&lt;/p&gt; – •数组变量写法，可以通过后台控制class名 1– &lt;p class=\"ccc\" :class=[who,who1]&gt;{{name}}控制台改变变量&lt;/p&gt; 双目运算符•作用：当一个属性需要有两个不同的表现方式时使用 •用法:以类改变举例： 1–:class(ifshow?'aaa':'bbb') –aaa,bbb均为提前写好的样式 –当ifshow为true时执行aaa,反之执行bbb Ajax请求利用接口调用网上的数据 代码示例 123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;script src=\"https://cdn.staticfile.org/axios/0.18.0/axios.min.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.staticfile.org/vue/2.2.2/vue.min.js\"&gt;&lt;/script&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"css/ajax.css\"/&gt; &lt;body&gt; &lt;div id=\"ajax\"&gt; &lt;!--{{endGetByStr()}}--&gt; &lt;input type=\"text\" v-model=\"value\" /&gt; &lt;button @click=\"endGetByStr()\"&gt;搜索歌曲/作者&lt;/button&gt;&lt;br /&gt; &lt;span v-for=\"i in shuju\" class=\"neirong\"&gt; &lt;span class=\"name\"&gt;{{i.author}}&lt;/span&gt; &lt;span class=\"title\"&gt;{{i.title}}&lt;/span&gt; &lt;img :src=\"i.pic\" /&gt; &lt;audio :src=\"i.url\" controls=\"controls\"&gt;&lt;/audio&gt; &lt;/span&gt; &lt;/div&gt; &lt;/body&gt; &lt;script type=\"text/javascript\" src=\"js/ajax.js\" &gt;&lt;/script&gt;&lt;/html&gt; 在css文件中简单设置样式有适配效果： 1234567891011/*适配*/@media only screen and (min-width: 0px) and (max-width:800px){ #ajax .neirong{ width: 50%; }}@media only screen and (min-width: 0px) and (max-width:500px){ #ajax .neirong{ width: 100%; }} 1234567891011121314151617181920212223242526#ajax .neirong{ width: 100%; display: block; border-bottom: 1px solid gainsboro; overflow: hidden; float: left;}#ajax .name{ width: 50px; color: aqua;}#ajax img{ border-radius: 50px; width: 100px;}/*适配*/@media only screen and (min-width: 0px) and (max-width:800px){ #ajax .neirong{ width: 50%; }}@media only screen and (min-width: 0px) and (max-width:500px){ #ajax .neirong{ width: 100%; }} js代码123456789101112131415161718192021222324252627282930var ajax=new Vue({ el:\"#ajax\", data:{ shuju:\"这里是数据\", value:\"\", }, methods:{ endGetByStr:function(){ //1.get通过直接发字符串拼接// axios.get(`get.php?name=${this.users.name}&amp;age=${this.users.name}`) let datas=this; axios.get(\"https://api.apiopen.top/searchMusic?name=\",{ params:{ // name:this.value, } }) .then(function (response) {// alert(response.data.result[1].author); datas.shuju=response.data.result }) .catch(function (error) { alert(\"error\"); }); } }}) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"jsp配置","slug":"jsp配置","date":"2019-10-30T03:11:12.000Z","updated":"2019-11-13T02:35:31.266Z","comments":true,"path":"2019/10/30/jsp配置/","link":"","permalink":"http://yoursite.com/2019/10/30/jsp配置/","excerpt":"","text":"配置Tomcat服务器 第一步，在Myeclipse下打开MyEclipse/Preferences…（考拉这些截图都是在前几篇经验提到安装的软件上进行的） 第二步，在type filter text中输入Tomcat找到Tomcat。第一个图是将MyEclipse Tomcat 6设置为“Disable”；第二个图是将Tomcat/Tomcat 7.x设置为“Enable”，并且在Tomcat home directory设置安装目录Tomcat的安装位置。下面的directory会自动填充。 第三步，在Tomcat 7.x下的JDK中添加自己下好的。 第四步，相信我们一定能够在Servers视图看见Tomcat服务器项目了，而且在视图中可以启动或停止服务器。 设置编码格式 第一步，在Myeclipse中打开Window/Preferences 第二步，选择MyEclipse/File and Editors/JSP，将“Encoding”中设置为”ISO 10646/Unicode(UTF-8)”。接下来Apply，最后OK即可。 编写一个简单的jsp，并运行 1.创建一个Project——选择File/New/Web Project 2.设置工程属性——在打开的页面设置属性Project Name，即工程的名字。而接下来就是设置J2EE Specification Level为Java EE 6.0。其他默认，点击”Finish”即可。 3.编写JSP文件——在创建了工新的工程后，已经存在了”index.jsp”。它是位于1.0/WebRoot/index.jsp目录下的（如第一个图）。index.jsp内容已经有了大致框架（如第二个图），接下来直接填充（如第三个图），考拉我就加入了一个简单的代码段。 4.开启Tomcat7的服务——点击第一个图红圈圈中的标志，从而添加Tomcat服务。这个过程是在新的界面中点”Add”,在”Sever”下选择”Tomcat 7.x”,而location会自动添加目录。 5.运行jsp程序——运行过程其实是点击上一步中红圈旁边的标记。（如下面下图所示）。如果跳出个提示框，那应该是问你是否保存已改变的工程，而你只需要确定即可。 6.查看运行结果——在浏览器输入网址即可看到效果。考拉我目前的效果如图所示，而关于网址是多少，请看截图喔。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"MySQL数据库管理与应用个人总结","slug":"MySQL数据库管理与应用个人总结","date":"2019-10-17T11:40:02.000Z","updated":"2019-11-13T02:35:31.266Z","comments":true,"path":"2019/10/17/MySQL数据库管理与应用个人总结/","link":"","permalink":"http://yoursite.com/2019/10/17/MySQL数据库管理与应用个人总结/","excerpt":"","text":"MySQL基础与数据库有关的几个概念: 1.数据(Data):可以被记录并拥有确切含义的已知事实。如: 人的姓名。数据的种类很多，数字、文字、图形、声音等多种表现形式，都可以经过数字化后存入计算机。2.数据库(DataBase,简称DB):是一个相关数据的集合。如: 学生数据库 3.数据库管理系统(DataBase Management System，简称DBMS): 帮助用户创建和管理数据库的应用程序的集合。如SQL Server、Oracle 、Access等。4.数据库系统(DataBase System, 简称DBS):一 般把数据 库和DBMS软件合称为数据库系统。5.数据表(Table)(关系) 一个数据库由若干数据表组成。数 据表是一组相关联的数据按行和列排列的二维表格，每个数据表均有一个表名。 6.字段(Field)(属性) 表中的每一列数据称为一一个字段字段名:每个字段的名称。 7.记录(元组) 表中的每一行称为一-条记录一个数据表是若干记录的集合。 文件管理阶段的主要特点:1.辅助存储器成为计算机系统不可缺少的组成部分，,用来存入数据文件。 2.文件管理系统对驻留在外存储器上的数据文件实施统一管理。应用程序不再需要了解数据在存储介质上的实际地址及存放形式，从而大大减少了程序员的工作量。 3.数据文件可以重复利用，不再与某个应用程序绑在一起。数据文件结构与程序之间的依赖关系并没有根本改变，因此它的缺陷依然是存在的。 缺点;主要表现在程序和文件相互依存、数据冗余大、数据的不一致性及不能反 常见的数据库管理系统 数据库市场上有许多数据库(DBMS)产品，当前，例如:■Oracle ■Microsoft SQL Server ■Sybase ASE ■IBM DB2 ■Microsoft Access ■Visual FoxPro它们各以自已特有的功能在数据库市场上占有席之地。 –员工表表 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182## `select * from emp;``select * from dept;``--工资表``select * from salgrade;``select * from bonus;``--查询员工表中的员工编号、姓名、工资` `select empno,ename,sal from emp;``--查询员工表中的员工编号、姓名、工资、年薪``select empno,ename,sal,sal*12 from emp;``--别名 as可以省略``select empno as 员工编号,ename as 员工姓名 from emp;``select empno 员工编号,ename 员工姓名,sal 月薪,sal*13 年薪 from emp;--小写加\"\"号select empno \"eo\" from emp;--在数据库中||做连接符相当于Java中的+号 必须单引号 select ename ||'的月薪是'||sal 间接 from emp;--去除重复行select distinct sal from emp;select distinct ename,sal from emp;--排序 order by 排序 升序asc(默认) 降序desc *代表所有select *from emp order by sal asc;select *from emp order by sal desc;select *from emp order by sal asc,ename asc;select *from emp order by sal asc,ename desc;select *from emp order by sal,ename ;select ename 姓名，sal 工资，empno 编号 from emp order by 工资 asc,姓名 asc;--查询A-B之间select * from emp where sal between 800 and 1000;``select * from emp where sal &gt;=800 and sal &lt;=1000;``--in （集合）属于集合中的一个``select * from emp where sal in(800,900,1000,1250);``select *from emp where sal =800 or sal=900;--查询奖金为空的人select*from emp where comm is null;``select *from emp where comm =''--like 模糊查询select*from emp where ename like's%'``select*from emp where ename like'李%'--李字开头的select*from emp where ename like'李__%'--李xx``--and or not 运算字符``select*from emp where sal&gt;900 and ename like 's%'--查询工资大于900并且名字以s开头的select*from emp where sal&gt;900 or like 's%'--查询工资大于900或者名字以s开头的``select*from emp where sal not in(800,900,1200)--查询工资除了800,900,1200select*from where ename not like 's%'--查询不以s开头的姓名``--查询员工首字母大写``select initcap(ename) from emp``--查询员工首字母全部小写``select lower(ename)from emp``--查询员工首字母全部大写``select upper(ename)from emp``--左移除``select ltrim('123admin','123')from emp``--右移除``select rtrim('123admin','admin')from emp--不写的话就是删除空格``--翻译 translate``select translate('jack','aj','12')from dual``--替换 replace``select replace('jack','a','b')from dual``--查找出现的位置 instr（第一次出现的位置）``select instr('admin','i',2)from dual``--截取字符串substr 从第三位开始（包含第三）截取5个``select substr('abcdefghi',3,5)from dual``--字符串连接 concat``select concat('admin','12345')from dual` `--数值函数``--1.绝对值``select abs(-25)from dual``--2.x的y次幂``select power(2,3)from dual``--3.向上取整``select ceil(12.3)from dual``--4.向下取整``select floor(12.8)from dual``--5.截断(保留小数点后两位)``select trunc(12.156,2)from dual``--6.四舍五入(保留小数点后两位)``select round(12.156,2)from dual``--7.开平方 sqrt``select sqrt(4)from dual``select power(8,1/3)from dual``--8.取余 mod``select mod(10,3)from dual``--9.取等号 sign(括号里的正负)``select sign(-25)from dual` `--日期函数``--1.months_between两个日期之间相隔的月份(出生至现在)``select months_between(sysdate,'5-2月-1995')from dual``--2.add_months修改月份``select add_months(sysdate,1)from dual``--3.next_day返回指定日期后的一个星期几的日期（不包含当前）``select next_day(sysdate,'星期六')from dual``--4.last day返回指定日期这个月的最后一天``select last_day(sysdate)from dual``--5.日期四舍五入 round``select round(sysdate,'YEAR')from dual``select round(sysdate,'month')from dual``select round(sysdate,'day')from dual``--6.日期做截断 trunc``select trunc(sysdate,'YEAR')from dual``select trunc(sysdate,'month')from dual``select trunc(sysdate,'day')from dual` `--转型函数:` `/*` `to_number char--&gt;number\\` `to_date char--&gt;date` `to_char number/date--&gt;char``*/``--1.to_char 日期转字符串``select to_char(sysdate,'yyyy-mm-dd hh24:mi:ss')from dual``--2.to_datee 字符串转日期``select to_date('2017年8月16日 16点40分30秒','yyyy\"年\"mm\"月\"dd\"日\" hh24\"点\"mi\"分\"ss\"秒\"')from dual;``--3.to_number字符串转数值类型``select to_number('$12,025,87.01`','$99,999,99.99')from dual`--4.to_char 数值转字符串select to_char(1251212.25,'L999,999,99.99')from dual``--5.时间比较问题``select * from emp where hiredate&gt;'1-1月-81'select * from emp where hiredate&gt;to_date('1981-1-1','yyyy-mm-dd');select*from emp where to_char(hiredate,'yyyy-mm-dd')&gt;'1981-1-1'` -- 其他函数--1.nvl空转零select ename ,nvl(comm,0)from emp--2.nvl 2select nvl2(comm,'有','太惨了')from emp--4.case when then end`select(case when sal&gt;=5000 then '有钱'` `when sal&gt;=4000 then '有钱1'` `when sal&gt;=3000 then '有钱2'` `when sal&gt;=2000 then '有钱3'` `else'穷' end)from emp` `--多行函数``--1.sum max min avg count sum()avg()适用于数值型 count()max()min()适用于任何类型数据``select max(sal)from emp--最大工资``select min(sal)from emp--最小工资``select avg(sal)from emp--平均工资``select sum(sal)from emp--工资和``select count(*)from emp--多少个员工select max(sal),min(sal),avg(sal),count(*)from emp--聚合函数可以写在一行``--聚合函数不可以和单行数据同时展示``select ename,max(sal)from emp``--count(*)统计所有select sum(sal)/count(*),avg(sal)from emp--count(exp)统计非空的exp的个数--count(distinct exp)统计非空不重复的exp的个数select count(sal),count(distinct sal)from emp``版权声明：本文为CSDN博主「那些年我睡的女孩」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/qq_37736906/article/details/77279779​ `查找``1``group by 子句将表中数据分成若干小组``语法格式``select column, group_function(column)``from table``[where condition]``[group by group_by_expression]``[order by column];``例子` `--统计人数小于5的部门工资` `select avg(sal) from emp group by deptno having count(*)&lt;5` `--统计各部门的最高工资排除最高工资小于3000的部门` `select deptno,max(sal)from emp group by deptno having max(sal)&gt;=3000` `插入` 2. `往表中插入数据的语句是insert语句，方式有两种，一种是记录值的插入，一种是查询结果的插入` `记录值的插入语法如下：` `INSERT INTO table [(column [, column…])]` `VALUES (value [, value…]);` `一次插入操作只插入一行` `例子` `insert into emp values(9527,'张三','程序员',007,sysdate,20,null,10)--第一种方式常用` `insert into emp(empno,ename,job)values(9528,'张三丰','武术教练')` `select * from emp--显示插入后的效果` `修改` `Update语句用于修改基本表中元组的某些列，其语法如下：` `UPDATE table` `SET column = value [, column = value] …` `[WHERE condition];` `其语义是：修改基本表中满足条件表达式的那些元组的列值，需修改的列值在set子句中指出` `例子` –修改 1234567891011121314 `update emp set ename='张四丰' where ename='FORD'` `select * from emp` `--把部门为20的所有员工20加500` `update emp set sal=sal+500 where deptno=20` `select * from emp`​ `删除`​ `删除` `--删除9528数据` `delete temp where empno=9528`​ `--输出全部` `delete temp 数据库的删除请注意————————————————版权声明：本文为CSDN博主「那些年我睡的女孩」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/qq_37736906/article/details/77341402 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]},{"title":"java面向对象知识点总结","slug":"java面向对象知识点总结","date":"2019-10-11T07:05:06.000Z","updated":"2019-11-13T02:35:31.266Z","comments":true,"path":"2019/10/11/java面向对象知识点总结/","link":"","permalink":"http://yoursite.com/2019/10/11/java面向对象知识点总结/","excerpt":"","text":"第一章1,什么是类?什么是对象?简单来说,类是抽象出某一类事物的行为和特征,并进行的封装,特征称之为属性,行为称之为方法;对象就是这一类的具体实例,对象拥有这个类的所有属性和方法 举个例子:所有的人是一个类,人所具有的属性:身高和体重…,人具有的方法:吃饭,睡觉..具体到某一个人是一个对象,比如小明就是一个对象,小明有身高,体重,可以吃饭,可以睡觉.. java编程思想中是这么描述对象的:对象具有状态,行为,和标识.这意味着每一个对象都可以拥有内部数据(它们给出了该对象的状态)和方法(它们产生行为),并且每一个对象都可以与其他对象区分开来,具体来说,就是每一个对象在内存中都有一个唯一的地址. 2,什么是面向对象?为什么要面向对象?官方话:面向对象（Object Oriented）是一种新兴的程序设计方法，或者是一种新的程序设计规范(paradigm)，其基本思想是使用对象、类、继承、封装、多态等基本概念来进行程序设计。从现实世界中客观存在的事物（即对象）出发来构造软件系统，并且在系统构造中尽可能运用人类的自然思维方式。面向对象是为了解决系统的可维护性，可扩展性，可重用性….我的理解:首先,面向对象是一种设计程序的方式,是一种设计思想.其次,面向对象节省代码,思路清晰,便于扩展.你所创建出的对象就是给你提供服务的. 第二章 类和对象的创建概念：面向对象就是把一个项目，一个事情分成更小的项目，或者说分成一个个更小的部分，每一部分负责什么方面的功能，最后再由这些部分组合而成为一个整体。好处：面相对象更接近实物的本质，提高代码的复用更具有扩展性。如何使用：通常是创建类的对象再给属性赋值。构造方法：构造方法的名称和类名相同，没有返回值类型。GO g=new GO();构造方法的重载：方法名相同，参数列表（个数，类型，顺序）不同，这是构造方法的重载。如果一个类中包含了两个或两个以上的方法，他们方法名相同，方法参数个数或者参数类型不同，则称该方法被重载了，这个过程是方法重载。构造方法在什么时候执行：New出对象；在继承中执行super();做一些初始化操作Static：可以用来修饰属性，方法和代码块，静态方法中不能使用this和super关键字。类名.属性 类名.方法 第三章 封装概念：封装指的是将对象的状态信息隐藏在对象内部，不允许外部程序直接访问对象内部信息，而是通过该类所提供的方法来实现对内部信息的操作访问。 封装的必要步骤： 属性私有化private； 为属性设置set和get方法； 调用set和get方法； 好处（作用）：提高了安全性 提高了复用性 提高了实现细节(隐藏实现细节) 访问权限： Public :权限最高，在项目不管声明情况下都可访问 Private：私有的，权限最低，只能在一个类才能访问 Protected：安全的，同包下可以进行访问 Default默认的，同包下可以访问，继承不可访问 this关键字 指代当前对象； 在同一个类中，this.属性 this.方法 注意事项：类的属性中均用private来修饰 定义概念：封装指的是将对象的状态信息隐藏在对象内部，不允许外部程序直接访问对象内部信息，而是通过该类所提供的方法来实现对内部信息的操作访问。封装的必要步骤：属性私有化private；为属性设置set和get方法；调用set和get方法；好处（作用）：提高了安全性 提高了复用性 提高了实现细节(隐藏实现细节)访问权限：Public :权限最高，在项目不管声明情况下都可访问Private：私有的，权限最低，只能在一个类才能访问Protected：安全的，同包下可以进行访问Default默认的，同包下可以访问，继承不可访问 this关键字指代当前对象；在同一个类中，this.属性 this.方法注意事项：类的属性中均用private来修饰 定义geter和seter方法()和seter()方法 第四章 继承概念：比如FeiGe快递系统中有三个实体类Person（人），Courier（快递员）,Customer（客户）类，Courier,Customer都属于（派生类）Person，所以都继承（extends）自Person类。好处：提高了代码的重用性 提高了代码的扩展性语法：class 类名 extends父接口{ //属性定义 //方法定义}注意事项：1.子类继承父类所以的属性和方法，只不过只能调用非Private属性和方法2.java中的继承只支持单继承，意思是一个子类只能继承一个父类，但是允许多层继承继承中的构造方法：调用父类中的构造方法，需用到关键字super super指代父类重写的概念：在继承的关系中。子类会自动继承父类中定义的方法，但有时子类中需要对继承的方法进行一些修改，即对父类的方法进行重写。语法：void 方法名（）{}注意事项：子类重写父类的方法时，不能使用比父类中被重写的方法更严格的访问权限，重写方法和被重写方法必须具有相同的方法名，相同的参数列表和相同的返回值类型，重写方法的访问修饰符必须大于被重写方法的访问修饰符，否则就不能被称为方法的重写。异常的处理：在程序执行代码的时候万一发生了异常，程序会按照预定的处理方法对异常进行处理，异常处理完毕之后，程序继续运行。语法：5个关键字 try catch finally throw throws常见的异常类型Exception 异常层次的根类 ArithmeticException 算术错误情形，如以零作除数ArrayIndexOutOfBoundsException 数组下标越界NullPointerException空指针异常ClassNotFoundException不能加载所需的类InputMismatchException得到的数据类型与实际输入的类型不匹配llegalArgumentException方法接收到非法参数 ClassCastException对象强制类型转换出错NumberFormatException数字格式转换异常，如把“abc”转换成数字 第五章 多态概念：指允许不同类的对象对同一消息做出响应即同同一消息可以根据发送对象的不同而采用多种不同的行为方式。好处：可替换性 可扩充性 接口性 灵活性 简化性多态的使用：子类向父类转换称为向上转型向上转型：&lt;父类型&gt;&lt;引用变量名&gt;=new&lt;子类型&gt;（）；将一个指向子类对象的父类引用赋给一个子类的引用，即将父类类型转换子类类型，称为向下转型，此时必须进行强制类型转换。向下转型：&lt;子类型&gt;&lt;引用变量名&gt;=（&lt;子类型&gt;）&lt;父类型的引用变量&gt;；运算符：instanceof 进行类型的判断Try-catch-finally 如果try中的所有语句正常执行完毕那么finally块就会被执行 多重catch 一段代码会出现多种异常这时可以在try语句后写多个catch语句块 第六章 抽象概念：如果一个类没有足够的信息去描述一个具体的对象那我们就称之为抽象类 语法：public abstract class类名{} 作用：抽象类是用来继承的比普通类更通用 抽象方法：abstract修饰没有方法体之声明返回的数据类型 方法名称和所需要的参数 语法 ：public abstract 返回值类型 方法名（参数列表）； 注意事项：包含抽象方法的类一定是抽象类 抽象类中不一定都是抽象方法 构造方法不能生命为抽象方法 abstract不能与private static final native 并列修饰同一个方法 Final 修饰类 被final修饰过的类不能被继承 因为不能被继承所以此类中所有方法都是final修饰 该类如果不需要有子类不需要被扩展类的方法不允许被重写就用final修饰该类 Throws通过try-catch捕获处理异常 第七章 接口概述：在软件中接口是一种规范和标准他们可以约束类的行为是一些方法特征的集合但是没有方法的实现 语法： 【修饰符】interface接口名extends父接口1，父接口2……{//常量定义//方法定义} Class类名extends父类名implements接口1，接口2….{//类成员} Run（）；方法提供服务 接口是一种能力接口是一种约定 抛出异常：throw 除系统自动抛出异常可以用throw自动抛出异常 Throw在程序中抛出异常throws在方法内抛出异常 Java不支持多继承性，即一个子类只能有一个父类；单继承使得java简单，易于管理，但如果要克服单继承性的缺点就要使用接口技术，是一个类可以实现多个接口，用关键字interface关键字来定义一个接口。 （1）接口声明：interface 接口名； 接口体:包括常量定义和方法定义，方法只允许声明不允许实现。 （2）接口使用：class A implements print,add 或者 class A extends A1 implements print,add （3）当某个类使用接口的时候，必须给出所有方法的实现，方法的类型、参数一定要和接口的一致；接口的方法默认为public abstract，故类在实现时一定不能漏写public关键字；接口常量默认关键字为public static。 （4）因为接口中只含有public static final 常量和public abstract方法，故在写接口的时候可以省略这些关键字。 （5）如果接口的返回类型不是void，那么实现方法体的时候，至少要有一个return语句；如果接口的返回类型是void，可以除了大括号之外可以没有任何语句。 （6）Java提供的接口都在相应的包中，可以通过引入包使用相应的接口；也可以自定义接口，一个源文件就是由类和接口来组成的。 （7）类实现的接口的方法以及接口中的常量可以通过类的对象进行调用，常量也可以通过类名和接口名进行调用。 （8）接口声明的时候，如果加上关键字public，那么接口可以被任一个类进行调用，如果没有public则为友好型接口，只能被同一个包内的类进行调用。 （9）如果父类使用某个接口，那么子类也就使用了接口，不用再使用implements。 （10）接口可以通过extends继承接口。 （11）如果一个类声明实现一个接口但没有实现接口的所有方法，那么这个类一定得是abstract类。 第八章 集合框架集合框架使用方便的接口和类都在java.util包中 集合框架的特点： 长度 数组长度是固定的集合长度是可变的 存储对象 数组可以存储基本的数据类型，也可以存储对象的引用 集合只能用于存储对象的引用 对象类型 数组必须是相同类型的数据 对象可以是不同类型 接口区别： Collection接口存储组 不唯一(允许重复)、 无序的对象。 Set接口继承Collection接口，存储-组唯一(不允许重复)、 无序的对象。 List接口继承Collection接口，存储组不唯-(允许重复)、 有序(以元素插入的次序来放置无素，不会重新排列)的对象 Map接口存储组成对的键 值对象，提供key(键)到value(值)的映射。Map中的key不要求有序，不允许重复。value 同样不要求有序，但允许重复。 List接口： 实现List接口的常用类有ArayList和Lnkedist.它们都可以容纳所有类型的对象，包括nll允许重复，并且都保证元素的存储顺序。 ArrayList和LinkedList的大致区别: arraylist是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构对于随机访问get和set, ArrayList 优于LinkedList, 因为LinkedList要移动指针。 对于新增和删除操作add和remove, LinkedList 比较占优势，因为ArrayList要移动数据。 list接口定义中的格各种常用方法 boolean add(Object o)在列表末尾顺序添加元素，起始索引位置从0开始 int size()返回列表中的元素个数 void add(int index,Objecto)在指定的索 引位置添加元素，原索引位置及其后面的元素依次后移 注意:新添加元素的索引位置必须介于0和列表中元素个数之间 0bject get(int index)返回指定索引位置处的元素 注意:取出的元素是Object类型，使用前需要进行强制类型转换 boolean contains(Object o)判断列表中是否存在指定元素 boolean remove(Object o)从列表中删除元素 Object remove(int index)从列表中删除指定位置元素，起始索引位置从0开始 Linkedlist的一些特殊用法 void addFirst(Object o)在列表的首部添加元素 void addLast(Object o)在列表的末尾添加元素 Object getFirst( )返回列表中的第一” 个元素 Object getLast( )返回列表中的最后一个元素 Object removeFirst( )删除并返回列表中的第一个元素 Set接口 Hashset的优点就是各方面都很快但数据是无序的 Threeset优点是有序而且可以按照升序方式进行排序，但是其他各方面不突出 Map接口 Object put （object key，object value）以“键一值对”的方式进行存储 如果武图添加重复的 键，那么最后加入的“键-值对”将替换掉原先的“键一道 对” Object get (Object key)根据键返回相关联的值，若不存在指定的键，则返回null Object remove (Object key)删除指定的键映射的“键一值对” int size()返回元素个数 Set keySet()返回键的集合 Collection values( )返回值的集合 boolean containsKey (Object key)若存在指定的键映射的“键值对”，则返回true boolean isEmpty( )若不存在键一值映射关系，则返回true void clear()从此映射中移除所有映射关系 泛型集合：list ArrayList ArrayL ist&lt;0bject&gt; list=new ArrayL ist&lt;0bject&gt;() ; list. add (0); list. add(99.9); list. add(false); 使用泛型集合在创建集合对象时指定集合中元素的类型，从集合中取出元素时无须进行类型强制转换，并且如果把非指定类型对象放入集合，会出现编译错误。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]}]}